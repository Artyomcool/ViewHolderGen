<#-- @ftlvariable name="" type="org.artyomcool.viewholdergen.Model" -->
<#if packageName != "">package ${packageName};</#if>

<#list imports as import>
${import}
</#list>

public class ${className} {

    //--- GENERATED FIELDS - DO NOT MODIFY
    /**
    * Original view
    */
    private View mView;

<#list descriptors as descriptor>
    /**
    * Field for R.id.${descriptor.id}
    */
    private ${descriptor.fieldClass} ${descriptor.fieldName};

</#list>
    //--- END OF GENERATED FIELDS

    //--- GENERATED METHODS - DO NOT MODIFY

    protected void init(View view) {
        mView = view;
    <#list descriptors as descriptor>
        ${descriptor.fieldName} = (${descriptor.fieldClass})view.findViewById(R.id.${descriptor.id});
    </#list>
        afterInit(view);
    }


    /**
    * Returns original view associated with this holder
    */
    public View getView() {
        return mView;
    }

    /**
    * Creates holder from {@link LayoutInflater} with parent (can be null)
    */
    public static ${className} create(LayoutInflater inflater, ViewGroup parent) {
        View view = inflater.inflate(R.layout.${layoutId}, parent, false);
        return create(view);
    }

    /**
    * Creates holder from view
    */
    public static ${className} create(View view) {
        ${className} holder = new ${className}();
        holder.init(view);
        return holder;
    }

    /**
    * Convention way to get holder from adapters.
    * Tries to retrieve holder associated with oldView.
    * If view is null, new view will be created with passed parent and associated with new holder.
    * If tag is null, new holder will be created and associated with view.
    */
    public static ${className} get(View oldView, ViewGroup parent, LayoutInflater inflater) {
        if (oldView == null) {
            if (parent == null) {
                throw new NullPointerException("Parent can not be null");
            }
            return create(inflater, parent);
        }
        Object holder = oldView.getTag();
        if (holder == null) {
            return create(oldView);
        }
        try {
            return (${className})holder;
        } catch(ClassCastException ex) {
            throw new IllegalArgumentException("View has tag that is not ${className}", ex);
        }
    }

    //-- END OF GENERATED METHODS

    /**
    * Creates empty ${className}
    * It will be invalid until {@link #init(View)} will be called.
    */
    protected ${className}() {
    }

    /**
    * Will be called at the end of {@link #init(View)}
    */
    protected void afterInit(View view) {
    }

}